tosca_definitions_version: tosca_2_0

imports:
- profiles/eu.swarmchestrate/micado/0.1/profile.yaml
- profiles/org.oasis-open/simple/2.0/relationship_types.yaml
  %namespace: tosca.relationships

service_template:
  node_templates:

    # Compute nodes
    front_compute:
      type: Compute.EC2
      properties:
        region_name: ADD_YOUR_REGION_NAME_HERE (e.g. eu-west-1)
        image_id: ADD_YOUR_IMAGE_ID_HERE (e.g. ami-061a2d878e5754b62)
        instance_type: ADD_YOUR_INSTANCE_TYPE_HERE (e.g. t2.small)
        key_name: (OPTIONAL) ADD_YOUR_KEY_NAME_HERE (e.g. my_ssh_key)
        security_group_ids:
          - ADD_YOUR_SECURITY_GROUP_ID_HERE (e.g. sg-93d46bf7)
      # what does it mean?
      interfaces:
        Occopus: {}
    
    back_compute:
       type: Compute.EC2
      properties:
        region_name: ADD_YOUR_REGION_NAME_HERE (e.g. eu-west-1)
        image_id: ADD_YOUR_IMAGE_ID_HERE (e.g. ami-061a2d878e5754b62)
        instance_type: ADD_YOUR_INSTANCE_TYPE_HERE (e.g. t2.small)
        key_name: (OPTIONAL) ADD_YOUR_KEY_NAME_HERE (e.g. my_ssh_key)
        security_group_ids:
          - ADD_YOUR_SECURITY_GROUP_ID_HERE (e.g. sg-93d46bf7)
      # what does it mean?
      interfaces:
        Occopus: {}
    
    # Application microservices
    front_end_service:
      type: Container.OCI
      properties:
        #component_name: front-end
        image: zewang42/fastAPI-front-end:latest
        ports:
          - 80
      requirements:
        - host: front_compute
        - dependency: back_end_service
      relationships:
        - type: tosca.relationships.ConnectsTo
          target: back_end_service
          properties:
            protocol: http
            port: 8080

    back_end_service:
      type: Container.OCI
      properties:
        image: lorel/docker-stress-ng
        args: ['--cpu', '0', '--cpu-method', 'pi', '-l', '20']
        resources:
          requests:
            cpu: "900m"
      requirements:
        - host: back_compute
#  Do we have any policy for QoS?
#  policies:
#    - qos_policy:
#        type: tosca.policies.QoS
#        targets: [front_end_service, back_end_service]
#        properties:
#          max_latency: 100 ms
#          min_throughput: 50 req/s
#          availability: 99.9%

